MVC

[MVC 패턴]

 Model : java파일, 비지니스 로직(DAO - 디비연결 처리)
 View : jsp파일, 사용자의 결과 페이지, 정보입력 페이지
 Controller : Servlet파일(java), model-view 연결
 
 
 클라이언트 => 요청 => web.xml(서블릿매핑) => C => DB 정보 필요 => M => DAO => DB
					 				  |
					 				  |
					 				  View
 
 * FrontController 패턴
 C -> FrontController => DB 정보 필요 => 
 
 
 * 상대 주소
 		./member/insertForm.jsp
 		. => webapp 폴더
 		./MemberJoin.me
 		. => 프로젝트명
 		
 
 Join.me -> web.xml (연결된 컨트롤러 전달)
 -> 컨트롤러 1, 2, 3
 2비교시 : db x, view 출력 - ActionForward
 2비교시 : db o, view 이동 - 객체 생성
 
 
 * 커넥션풀(Connection pool) : 매번 db 호출시마다 db연결을 수행하는 것이 아니라
 							db 연결정보를 저장해서 계속해서 사용할 수 있도록
 							벡터의 형태로 구성된다.
 							
 1) service() - doGet(), doPost() 호출할 때 마다 1개씩 할당
 2) 커넥션의 개수를 제한
 3) 커넥션 대여, 사용 후 자원 회수 (관리자)
 
 
 요청 -> 할당 가능한 커넥션 객체 있는지, 없는지
 
 		있을 때 : (1) 커넥션 객체 할당 (2) 객체 사용 (3) 객체 반납
 		
 		없을 때 : (1) 커넥션 객체가 할당될때까지 대기 (2) 커넥션 객체 임시로 생성(소멸)
 		
 
 <Context>
	<Resouce 
		name="외부에서 호출되는 해당 이름"
		auth="자원관리자(Application/Container)"
		type="리소스를 사용할 때 실제로 처리되는 클래스"
		driverClassName="DB 드라이버명"
		username="DB 아이디"
		password="DB 비밀번호"
		url = "DB 주소"
		maxWait="커넥션이 없을 때 기다리는 최대 시간"/>
 </Context>
 
 
 
 패턴1 : DB 사용 X, view 페이지 사용(출력)
 패턴2 : DB 사용 O(작업 처리), view 페이지 이동
 패턴3 : DB 사용 O, view 페이지 사용(출력)